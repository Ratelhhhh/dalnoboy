package app

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"sync"
	"time"

	"dalnoboy/internal"
	"dalnoboy/internal/bot"
	"dalnoboy/internal/database"
	"dalnoboy/internal/service"
)

// App –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
type App struct {
	Name         string
	AdminBot     *bot.AdminBot
	DriverBot    *bot.DriverBot
	Database     *database.Database
	OrderService service.OrderService
	HTTPServer   *http.Server
}

// HealthResponse –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç health check
type HealthResponse struct {
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	AppName   string    `json:"app_name"`
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func New(name string) *App {
	return &App{
		Name: name,
	}
}

// healthCheckHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç health check –∑–∞–ø—Ä–æ—Å—ã
func (a *App) healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	response := HealthResponse{
		Status:    "ok",
		Timestamp: time.Now(),
		AppName:   a.Name,
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// startHTTPServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
func (a *App) startHTTPServer() error {
	mux := http.NewServeMux()

	// API –º–∞—Ä—à—Ä—É—Ç—ã
	mux.HandleFunc("/health", a.healthCheckHandler)
	mux.HandleFunc("/v1/orders", a.getOrdersHandler)

	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞
	mux.HandleFunc("/", a.staticHandler)

	a.HTTPServer = &http.Server{
		Addr:    ":8080",
		Handler: mux,
	}

	log.Printf("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
	log.Printf("üì± –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
	log.Printf("üîå API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080/v1/orders")
	return a.HTTPServer.ListenAndServe()
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func (a *App) Run() error {

	fmt.Printf("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ %s –∑–∞–ø—É—â–µ–Ω–æ\n", a.Name)

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞
	config, err := internal.NewConfig()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	if err := config.Validate(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: %v", err)
	}

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := database.New(config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	a.Database = db
	defer a.Database.Close()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤
	a.OrderService = service.NewOrderService(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
	adminBot, err := bot.NewAdminBot(config, db)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞: %v", err)
	}
	a.AdminBot = adminBot

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
	driverBot, err := bot.NewDriverBot(config, db)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: %v", err)
	}
	a.DriverBot = driverBot

	// –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω–∞—Ö
	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		defer wg.Done()
		if err := a.AdminBot.Start(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞: %v", err)
		}
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		if err := a.DriverBot.Start(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: %v", err)
		}
	}()

	wg.Add(1)
	go func() {
		defer wg.Done()
		if err := a.startHTTPServer(); err != nil && err != http.ErrServerClosed {
			log.Printf("–û—à–∏–±–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}()

	fmt.Println("–û–±–∞ –±–æ—Ç–∞ –∏ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç...")
	wg.Wait()

	return nil
}

// Shutdown gracefully –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (a *App) Shutdown(ctx context.Context) error {
	if a.HTTPServer != nil {
		if err := a.HTTPServer.Shutdown(ctx); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
		}
	}
	return nil
}
