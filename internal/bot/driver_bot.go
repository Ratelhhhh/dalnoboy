package bot

import (
	"fmt"
	"log"
	"strings"
	"time"

	"dalnoboy/internal"
	"dalnoboy/internal/database"
	"dalnoboy/internal/domain"
	"dalnoboy/internal/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// DriverBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
type DriverBot struct {
	bot           *tgbotapi.BotAPI
	database      *database.Database
	orderService  *service.OrderService
	driverService *service.DriverService
}

// NewDriverBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
func NewDriverBot(config *internal.Config, db *database.Database, orderService *service.OrderService, driverService *service.DriverService) (*DriverBot, error) {
	log.Printf("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å —Ç–æ–∫–µ–Ω–æ–º: %s...", config.Bot.DriverToken[:10]+"...")

	bot, err := tgbotapi.NewBotAPI(config.Bot.DriverToken)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π: %v", err)
	}

	log.Printf("–ë–æ—Ç –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	return &DriverBot{
		bot:           bot,
		database:      db,
		orderService:  orderService,
		driverService: driverService,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
func (db *DriverBot) Start() error {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := db.bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.Message != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
			db.handleMessage(update.Message)
		}
	}

	return nil
}

// formatOrders —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ ID
func (db *DriverBot) formatOrders(orders []domain.Order) string {
	if len(orders) == 0 {
		return "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
	}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (%d):\n\n", len(orders)))

	for i, order := range orders {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –º–µ–∂–≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫
		fromLoc := "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		toLoc := "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

		if order.FromCityName != nil && order.ToCityName != nil {
			// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
			fromLoc = fmt.Sprintf("%s ‚Üí %s", *order.FromCityName, *order.ToCityName)

			// –ê–¥—Ä–µ—Å–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
			if order.FromAddress != nil && order.ToAddress != nil {
				toLoc = fmt.Sprintf("üè† %s: %s | %s: %s",
					*order.FromCityName, *order.FromAddress,
					*order.ToCityName, *order.ToAddress)
			} else if order.FromAddress != nil {
				toLoc = fmt.Sprintf("üè† %s: %s", *order.FromCityName, *order.FromAddress)
			} else if order.ToAddress != nil {
				toLoc = fmt.Sprintf("üè† %s: %s", *order.ToCityName, *order.ToAddress)
			} else {
				toLoc = "üè† –ê–¥—Ä–µ—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
			}
		} else if order.FromCityName != nil {
			fromLoc = *order.FromCityName
			if order.FromAddress != nil {
				toLoc = fmt.Sprintf("üè† –ê–¥—Ä–µ—Å: %s", *order.FromAddress)
			}
		} else if order.ToCityName != nil {
			toLoc = *order.ToCityName
			if order.ToAddress != nil {
				fromLoc = fmt.Sprintf("üè† –ê–¥—Ä–µ—Å: %s", *order.ToAddress)
			}
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
		tagsStr := "–ù–µ—Ç —Ç–µ–≥–æ–≤"
		if len(order.Tags) > 0 {
			tagsStr = strings.Join(order.Tags, ", ")
		}

		result.WriteString(fmt.Sprintf("%d. üöö –ó–∞–∫–∞–∑\n", i+1))
		result.WriteString(fmt.Sprintf("   üìù %s\n", order.Title))
		if order.Description != "" {
			result.WriteString(fmt.Sprintf("   üìÑ %s\n", order.Description))
		}
		result.WriteString(fmt.Sprintf("   %s\n", fromLoc))
		result.WriteString(fmt.Sprintf("   %s\n", toLoc))
		result.WriteString(fmt.Sprintf("   ‚öñÔ∏è %.1f –∫–≥ | üí∞ %.0f ‚ÇΩ\n", order.WeightKg, order.Price))
		result.WriteString(fmt.Sprintf("   üë§ %s | üì± %s\n", order.CustomerName, order.CustomerPhone))

		// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
		if len(order.Tags) > 0 {
			result.WriteString(fmt.Sprintf("   üè∑Ô∏è %s\n", tagsStr))
		}

		result.WriteString("\n")
	}
	return result.String()
}

// splitMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è Telegram
func (db *DriverBot) splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var parts []string
	var currentPart strings.Builder
	lines := strings.Split(text, "\n")

	for _, line := range lines {
		// –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
		if currentPart.Len()+len(line)+1 > maxLength {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
			if currentPart.Len() > 0 {
				parts = append(parts, strings.TrimSpace(currentPart.String()))
				currentPart.Reset()
			}

			// –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—ë
			if len(line) > maxLength {
				// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ —Å–ª–æ–≤–∞–º
				words := strings.Fields(line)
				var tempLine strings.Builder

				for _, word := range words {
					if tempLine.Len()+len(word)+1 > maxLength {
						if tempLine.Len() > 0 {
							parts = append(parts, strings.TrimSpace(tempLine.String()))
							tempLine.Reset()
						}
					}
					if tempLine.Len() > 0 {
						tempLine.WriteString(" ")
					}
					tempLine.WriteString(word)
				}

				if tempLine.Len() > 0 {
					currentPart.WriteString(tempLine.String())
					currentPart.WriteString("\n")
				}
			} else {
				currentPart.WriteString(line)
				currentPart.WriteString("\n")
			}
		} else {
			currentPart.WriteString(line)
			currentPart.WriteString("\n")
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
	if currentPart.Len() > 0 {
		parts = append(parts, strings.TrimSpace(currentPart.String()))
	}

	return parts
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (db *DriverBot) handleMessage(message *tgbotapi.Message) {
	text := message.Text
	chatID := message.Chat.ID

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É —Å –±–æ—Ç–æ–º
	telegramID := message.From.ID
	var tag *string
	if message.From.UserName != "" {
		uname := "@" + message.From.UserName
		tag = &uname
	}
	name := strings.TrimSpace(message.From.FirstName + " " + message.From.LastName)
	if name == "" {
		name = message.From.UserName
	}
	driver, ensureErr := db.driverService.EnsureDriverExistsByTelegram(name, telegramID, tag)
	if ensureErr != nil {
		log.Printf("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ-—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è %d: %v", telegramID, ensureErr)
	}

	var response string
	var keyboard tgbotapi.ReplyKeyboardMarkup

	switch text {
	case "/start":
		response = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤–æ–¥–∏—Ç–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
		keyboard = driverMainMenuKeyboard()
	case "/help", "‚ùì –ü–æ–º–æ—â—å":
		response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã\nüîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\nüîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤"
	case "/orders", "üìã –ó–∞–∫–∞–∑—ã":
		// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
		orders, err := db.orderService.GetActiveOrders()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: %v", err)
			response = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
		} else {
			response = db.formatOrders(orders)
		}
		keyboard = driverMainMenuKeyboard()
	case "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
		// –í–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
		if driver == nil {
			log.Printf("–í–æ–¥–∏—Ç–µ–ª—å —Å Telegram ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", telegramID)
			response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
			break
		}
		if err := db.driverService.UpdateDriverNotifications(driver.UUID, true); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è %s: %v", driver.UUID, err)
			response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		} else {
			response = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."
		}
		keyboard = driverMainMenuKeyboard()
	case "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
		// –í—ã–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
		if driver == nil {
			log.Printf("–í–æ–¥–∏—Ç–µ–ª—å —Å Telegram ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", telegramID)
			response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
			break
		}
		if err := db.driverService.UpdateDriverNotifications(driver.UUID, false); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è %s: %v", driver.UUID, err)
			response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
		} else {
			response = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã."
		}
		keyboard = driverMainMenuKeyboard()

	// –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - —É–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ñ–∏–ª—å—Ç—Ä–æ–≤
	/*
		case "/filter", "‚öôÔ∏è –§–∏–ª—å—Ç—Ä":
			response = "–í—ã –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
			keyboard = filterMenuKeyboard()
		case "üìç –ú–∞—Ä—à—Ä—É—Ç":
			response = "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
			keyboard = filterMenuKeyboard()
		case "üí∞ –¶–µ–Ω–∞":
			response = "–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10000-20000"
			keyboard = filterMenuKeyboard()
		case "üìÖ –î–∞—Ç–∞":
			response = "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: –°–µ–≥–æ–¥–Ω—è –∏–ª–∏ 2025-08-10 ‚Äî 2025-08-15"
			keyboard = filterMenuKeyboard()
		case "üì¶ –¢–∏–ø –≥—Ä—É–∑–∞":
			response = "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä, –ù–µ–≥–∞–±–∞—Ä–∏—Ç, –û–ø–∞—Å–Ω—ã–π"
			keyboard = filterMenuKeyboard()
		case "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å":
			response = "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã"
			keyboard = filterMenuKeyboard()
	*/

	case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
		response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
		keyboard = driverMainMenuKeyboard()
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	}

	msg := tgbotapi.NewMessage(chatID, response)
	if keyboard.Keyboard != nil {
		msg.ReplyMarkup = keyboard
	}

	// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
	parts := db.splitMessage(response, 4000) // Telegram –ª–∏–º–∏—Ç 4096, –±–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º

	for i, part := range parts {
		// –î–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –Ω–µ—Ç
		if i == 0 {
			msg := tgbotapi.NewMessage(chatID, part)
			if keyboard.Keyboard != nil {
				msg.ReplyMarkup = keyboard
			}
			if _, err := db.bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
			}
		} else {
			// –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å—Ç–µ–π –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			msg := tgbotapi.NewMessage(chatID, part)
			if _, err := db.bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
			}
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
		if i < len(parts)-1 {
			time.Sleep(100 * time.Millisecond)
		}
	}
}
