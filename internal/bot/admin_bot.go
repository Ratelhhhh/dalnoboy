package bot

import (
	"fmt"
	"log"
	"strings"

	"dalnoboy/internal"
	"dalnoboy/internal/database"
	"dalnoboy/internal/domain"
	"dalnoboy/internal/service"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AdminBot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
type AdminBot struct {
	bot          *tgbotapi.BotAPI
	database     *database.Database
	orderService service.OrderService
}

// NewAdminBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
func NewAdminBot(config *internal.Config, db *database.Database) (*AdminBot, error) {
	bot, err := tgbotapi.NewBotAPI(config.Bot.AdminToken)
	if err != nil {
		return nil, err
	}

	log.Printf("–ê–¥–º–∏–Ω—Å–∫–∏–π –±–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	return &AdminBot{
		bot:          bot,
		database:     db,
		orderService: service.NewOrderService(db),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –±–æ—Ç–∞
func (ab *AdminBot) Start() error {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := ab.bot.GetUpdatesChan(updateConfig)

	for update := range updates {
		if update.Message != nil {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
			ab.handleMessage(update.Message)
		}
	}

	return nil
}

// formatOrders —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å ID
func (ab *AdminBot) formatOrders(orders []domain.Order) string {
	if len(orders) == 0 {
		return "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
	}

	var result strings.Builder
	result.WriteString(fmt.Sprintf("üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (%d):\n\n", len(orders)))

	for i, order := range orders {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
		dateStr := "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
		if order.AvailableFrom != nil {
			dateStr = order.AvailableFrom.Format("02.01.2006")
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
		dimensions := "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
		if order.LengthCm != nil && order.WidthCm != nil && order.HeightCm != nil {
			dimensions = fmt.Sprintf("%.0f√ó%.0f√ó%.0f —Å–º", *order.LengthCm, *order.WidthCm, *order.HeightCm)
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–∏
		fromLoc := "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		toLoc := "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
		if order.FromLocation != nil {
			fromLoc = *order.FromLocation
		}
		if order.ToLocation != nil {
			toLoc = *order.ToLocation
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
		tagsStr := "–ù–µ—Ç —Ç–µ–≥–æ–≤"
		if len(order.Tags) > 0 {
			tagsStr = strings.Join(order.Tags, ", ")
		}

		result.WriteString(fmt.Sprintf("%d. üöö –ó–∞–∫–∞–∑ #%s\n", i+1, order.UUID[:8]))
		result.WriteString(fmt.Sprintf("   üìù %s\n", order.Title))
		if order.Description != "" {
			result.WriteString(fmt.Sprintf("   üìÑ %s\n", order.Description))
		}
		result.WriteString(fmt.Sprintf("   üë§ %s (%s)\n", order.CustomerName, order.CustomerPhone))
		result.WriteString(fmt.Sprintf("   üìç %s ‚Üí %s\n", fromLoc, toLoc))
		result.WriteString(fmt.Sprintf("   ‚öñÔ∏è %.1f –∫–≥\n", order.WeightKg))
		result.WriteString(fmt.Sprintf("   üìè %s\n", dimensions))
		result.WriteString(fmt.Sprintf("   üè∑Ô∏è %s\n", tagsStr))
		result.WriteString(fmt.Sprintf("   üí∞ %.0f ‚ÇΩ\n", order.Price))
		result.WriteString(fmt.Sprintf("   üìÖ %s\n", dateStr))
		result.WriteString(fmt.Sprintf("   üÜî ID: %s\n", order.UUID))
		result.WriteString("\n")
	}

	return result.String()
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (ab *AdminBot) handleMessage(message *tgbotapi.Message) {
	text := message.Text
	chatID := message.Chat.ID

	var response string
	var keyboard tgbotapi.ReplyKeyboardMarkup

	switch text {
	case "/start":
		response = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
		keyboard = mainMenuKeyboard()
	case "/help", "‚ùì –ü–æ–º–æ—â—å":
		response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å\n/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã\n/filter - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
	case "/status":
		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		ordersCount, err := ab.database.GetOrdersCount()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤: %v", err)
			ordersCount = -1
		}

		customersCount, err := ab.database.GetCustomersCount()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: %v", err)
			customersCount = -1
		}

		if ordersCount >= 0 && customersCount >= 0 {
			response = fmt.Sprintf("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüìã –ó–∞–∫–∞–∑–æ–≤: %d\nüë• –ö–ª–∏–µ–Ω—Ç–æ–≤: %d", ordersCount, customersCount)
		} else {
			response = "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
		}
	case "/orders", "üìã –ó–∞–∫–∞–∑—ã":
		// –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
		orders, err := ab.orderService.GetAllOrders()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: %v", err)
			response = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
		} else {
			response = ab.formatOrders(orders)
		}
		keyboard = ordersMenuKeyboard()
	case "/filter", "‚öôÔ∏è –§–∏–ª—å—Ç—Ä":
		response = "–í—ã –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
		keyboard = filterMenuKeyboard()
	case "üìç –ú–∞—Ä—à—Ä—É—Ç":
		response = "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞ ‚Üí –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
		keyboard = filterMenuKeyboard()
	case "üí∞ –¶–µ–Ω–∞":
		response = "–£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10000-20000"
		keyboard = filterMenuKeyboard()
	case "üìÖ –î–∞—Ç–∞":
		response = "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: –°–µ–≥–æ–¥–Ω—è –∏–ª–∏ 2025-08-10 ‚Äî 2025-08-15"
		keyboard = filterMenuKeyboard()
	case "üì¶ –¢–∏–ø –≥—Ä—É–∑–∞":
		response = "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –†–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä, –ù–µ–≥–∞–±–∞—Ä–∏—Ç, –û–ø–∞—Å–Ω—ã–π"
		keyboard = filterMenuKeyboard()
	case "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å":
		response = "–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã"
		keyboard = filterMenuKeyboard()
	case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
		response = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
		keyboard = mainMenuKeyboard()
	default:
		response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
	}

	msg := tgbotapi.NewMessage(chatID, response)
	if keyboard.Keyboard != nil {
		msg.ReplyMarkup = keyboard
	}
	ab.bot.Send(msg)
}
